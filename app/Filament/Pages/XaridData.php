<?php

namespace App\Filament\Pages;

use App\Models\XaridData as ModelsXaridData;
use Filament\Forms\Components\TextInput;
use Filament\Pages\Page;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Section;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Filament\Forms\Components\Actions;
use Filament\Notifications\Notification;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\TextColumn\TextColumnSize;
use Filament\Support\Enums\Alignment;
use Filament\Support\Enums\VerticalAlignment;

class XaridData extends Page implements HasTable, HasForms
{
    use InteractsWithTable;
    use InteractsWithForms;

    protected static ?string $navigationIcon = 'heroicon-o-document-text';

    protected static string $view = 'filament.pages.xarid-data';

    public $proc_id = null; // Default value

    public function mount()
    {
        $this->proc_id = session('xarid_data_proc_id');
    }

    protected $listeners = ['refreshRelations' => '$refresh'];

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()
                    ->schema([
                        TextInput::make('proc_id')
                            ->label('Proc ID')
                            ->required()
                            ->placeholder('Enter Proc ID')
                            ->maxWidth('md')
                            ->columnSpanFull(),
                        Actions::make([
                            Action::make('find')
                                ->label('Find')
                                ->action('findProcId')
                                ->button()
                                ->color('primary')
                                ->size('md')
                        ])
                            // ->alignment(Alignment::Right)
                            ->columnSpanFull()
                    ])
                    ->columns(1)
                    ->columnSpanFull()
                    ->compact()
            ]);
    }

    public function findProcId()
    {
        $data = $this->form->getState();
        $this->proc_id = $data['proc_id'];
        session(['xarid_data_proc_id' => $this->proc_id]);
        redirect('admin/xarid-data');
    }

    public function refreshTable()
    {
        $this->dispatch('refreshTable');
    }

    public function table(Table $table): Table
    {
        return $table
            ->query(ModelsXaridData::query())
            ->emptyStateDescription('No data found for the given Proc ID.')
            ->columns([
                TextColumn::make('proc_id')
                    ->label('ID'),
                TextColumn::make('created_at')
                    ->label('–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞')
                    ->formatStateUsing(fn($state) => date('d.m.Y H:i', strtotime($state))), // Format date
                // TextColumn::make('fields.desc.value')
                //     ->label('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
                //     ->verticalAlignment(VerticalAlignment::Start)
                //     ->size(TextColumnSize::Small)
                //     ->grow()
                //     ->wrap()
                //     ->width('lg')
                //     ->formatStateUsing(fn($state, $record) => '<a href="https://xt-xarid.uz/procedure/' . $record->proc_id . '/core" target="_blank" rel="noreferrer noopener">' . $state . '</a>')
                //     ->html(),
                TextColumn::make('fields.amount.value')
                    ->label('–û–±—ä–µ–º'),
                TextColumn::make('fields.price.value')
                    ->label('–¶–µ–Ω–∞'),
                TextColumn::make('lot_id')
                    ->label('–°—É–º–º–∞')
                    ->getStateUsing(function ($record) {
                        // Retrieve values from the record
                        $price = $record->price; // Assuming this is a numeric value
                        $amount = preg_replace('/\D/', '', $record->fields['amount']['value']); // Remove non-numeric characters
                        $currency = preg_replace('/[^a-zA-Z]/', '', $record->fields['price']['value']); // Extract currency

                        // Convert amount to an integer (if needed)
                        $amount = (int)$amount;

                        // Calculate the total sum
                        $sum = $price * $amount;

                        // Return the formatted result
                        return number_format($sum, 2) . ' ' . strtoupper($currency); // Format to two decimal places and append currency
                    }),
                // Add additional columns as necessary
                TextColumn::make('fields.close_at.value')
                    ->label('–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'),
                TextColumn::make('fields.regions.value')
                    ->html()
                    ->label('–†–µ–≥–∏–æ–Ω –∑–∞—è–≤–ª–µ–Ω–Ω—ã–π –≤ –ª–æ—Ç–µ'),
                TextColumn::make('company_data.full_title')
                    ->wrap()
                    ->label('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ1')
                    ->html()
                    ->formatStateUsing(
                        fn($state, $record) => ($record->company_data['full_title'] ?? '') . '<br>' .
                            ($record->company_data['title'] ?? '') . '<br>' .
                            ($record->debug['params']['data_sign']['inn'] ?? '–ù–µ—Ç –ò–ù–ù')
                    ),
                TextColumn::make('debug?.params?.data_sign?.meta?.company_name')
                    ->label('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ2')
                    ->wrap()
                    ->html()
                    ->getStateUsing(
                        function ($record) {
                            return ($record->debug?->params?->data_sign?->meta?->company_name ?? '–ù–µ—Ç –ö–æ–º–ø–∞–Ω–∏–∏') . '<br>' .
                                ($record->debug?->params?->data_sign?->meta?->city ?? '–ù–µ—Ç –ì–æ—Ä–æ–¥–∞');
                        }
                    ),
                TextColumn::make('participants_count')
                    ->label('–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'),
                TextColumn::make('unique_viewers')
                    ->getStateUsing(function ($record) {
                        if (is_null($record->unique_viewers)) {
                            return 0; // Or any default value you prefer
                        }

                        if (!is_array($record->unique_viewers)) {
                            // If it's a string (e.g., JSON), try to decode it
                            $viewers = json_decode($record->unique_viewers, true);
                            if (is_null($viewers)) {
                                // If JSON decode fails, return the original value or a default
                                return $record->unique_viewers ?: 0;
                            }
                        } else {
                            $viewers = $record->unique_viewers;
                        }

                        $uniqueCount = count(array_unique(array_map('trim', $viewers)));
                        return $uniqueCount;
                    })
                    ->label('üëÅ'),
                TextColumn::make('status')
                    ->label('–°—Ç–∞—Ç—É—Å')
                    ->formatStateUsing(fn($state) => $this->getStatusLabel($state)),
                TextColumn::make('fields.header.hide_value')
                    ->label('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
                    ->wrap()
                    ->formatStateUsing(fn($state, $record) => '<a href="https://xt-xarid.uz/procedure/' . $record->proc_id . '/core" target="_blank" rel="noreferrer noopener">' . $state . '</a>')
                    ->html(),
                TextColumn::make('agree')
                    ->label('–í—ã–∏–≥—Ä–∞–≤—à–∏–π')
                    ->formatStateUsing(
                        fn($state, $record) =>
                        '<a href="https://xt-xarid.uz/workspace/contract/' . $record->proc_id . '.1.1/core" target="_blank" rel="noreferrer noopener">–í—ã–∏–≥—Ä–∞–≤—à–∏–π</a>'
                    )
                    ->html()
            ])
            ->filters([
                //
            ]);
    }

    protected function getFormActions(): array
    {
        return [
            Action::make('find')
                ->label('Find')
                ->action('findProcId'),
        ];
    }


    protected function getStatusLabel($code)
    {
        $statuses = [
            ["name" => "–û—Ç–∫—Ä—ã—Ç", "code" => "open"],
            ["name" => "–ó–∞–∫—Ä—ã—Ç", "code" => "finish"],
            ["name" => "–û–∂–∏–¥–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ü–æ–±–µ–¥–∏—Ç–µ–ª—è", "code" => "wait_winner_money"],
            ["name" => "–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", "code" => "wait_agree"],
            ["name" => "–ß–µ—Ä–Ω–æ–≤–∏–∫", "code" => "draft"],
            ["name" => "–û—Ç–∫–ª–æ–Ω–µ–Ω –ò–°–£–ì–§", "code" => "rejected"],
            ["name" => "–û—Ç–º–µ–Ω–µ–Ω", "code" => "cancel"],
            ["name" => "–¢–æ—Ä–≥–∏", "code" => "chaffer"],
            ["name" => "–ó–∞–∫—Ä—ã—Ç —Å –æ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º", "code" => "close_with_one"],
            ["name" => "–ó–∞–∫—Ä—ã—Ç", "code" => "finish"],
            ["name" => "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", "code" => "reject_offer"],
        ];

        $status = collect($statuses)->firstWhere('code', $code);
        return $status ? $status['name'] : $code; // Return name or code if not found
    }
}
